import React, { useState, useEffect, useMemo } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { ChevronDown, ChevronUp, Play, Save, Database, FileJson, TrendingUp, AlertCircle, CheckCircle, Upload, Download, Trash2, Copy, Edit } from 'lucide-react';

// Mock data structures
const mockTestData = {
  "dataset1": {
    "sentences": [
      {
        "id": "s1",
        "text": "The heavy rain caused flooding in the city.",
        "gold_entities": ["heavy rain", "flooding", "city"],
        "gold_relationships": [
          { "cause": "heavy rain", "effect": "flooding", "location": "city" }
        ]
      },
      {
        "id": "s2",
        "text": "Smoking increases the risk of lung cancer.",
        "gold_entities": ["smoking", "risk", "lung cancer"],
        "gold_relationships": [
          { "cause": "smoking", "effect": "increases risk of lung cancer" }
        ]
      }
    ]
  }
};

const initialPrompts = {
  "entity_extraction": [
    {
      "id": "ee_prompt_1",
      "name": "Basic Entity Extraction",
      "template": "Extract all causal entities from the following text: {text}",
      "isCustom": false
    },
    {
      "id": "ee_prompt_2",
      "name": "Detailed Entity Extraction",
      "template": "Identify and extract all entities involved in causal relationships in this text: {text}. Format as JSON array.",
      "isCustom": false
    }
  ],
  "relationship_extraction": [
    {
      "id": "re_prompt_1",
      "name": "Basic Relationship Extraction",
      "template": "Extract causal relationships from: {text}",
      "isCustom": false
    },
    {
      "id": "re_prompt_2",
      "name": "Structured Relationship Extraction",
      "template": "Find all cause-effect relationships in: {text}. Return as JSON with 'cause' and 'effect' fields.",
      "isCustom": false
    }
  ]
};

const mockModels = ["claude-3-opus", "claude-3-sonnet", "gpt-4", "gpt-3.5-turbo"];

// Main App Component
export default function CausalExtractionFramework() {
  const [activeTab, setActiveTab] = useState('setup');
  const [selectedTask, setSelectedTask] = useState('entity_extraction');
  const [selectedPrompts, setSelectedPrompts] = useState([]);
  const [selectedModels, setSelectedModels] = useState([]);
  const [selectedDataset, setSelectedDataset] = useState('dataset1');
  const [runHistory, setRunHistory] = useState([]);
  const [currentRun, setCurrentRun] = useState(null);
  const [isRunning, setIsRunning] = useState(false);
  const [uploadedData, setUploadedData] = useState(mockTestData);
  const [prompts, setPrompts] = useState(initialPrompts);
  const [showAddPrompt, setShowAddPrompt] = useState(false);
  const [newPrompt, setNewPrompt] = useState({ name: '', template: '' });
  const [selectedResult, setSelectedResult] = useState(null);

  // Handle adding a new prompt
  const handleAddPrompt = () => {
    if (newPrompt.name && newPrompt.template) {
      const newPromptObj = {
        id: `custom_${Date.now()}`,
        name: newPrompt.name,
        template: newPrompt.template,
        isCustom: true
      };
      
      setPrompts(prev => ({
        ...prev,
        [selectedTask]: [...prev[selectedTask], newPromptObj]
      }));
      
      setNewPrompt({ name: '', template: '' });
      setShowAddPrompt(false);
    }
  };

  // Simulate running evaluation
  const runEvaluation = async () => {
    setIsRunning(true);
    setActiveTab('progress');
    
    const runId = Date.now().toString();
    const results = [];
    
    for (const promptId of selectedPrompts) {
      const prompt = prompts[selectedTask].find(p => p.id === promptId);
      for (const model of selectedModels) {
        // Get all test sentences
        const sentences = uploadedData[selectedDataset].sentences;
        const sentenceResults = [];
        
        for (const sentence of sentences) {
          // Simulate API call and evaluation
          await new Promise(resolve => setTimeout(resolve, 500));
          
          let mockPredictions, goldData;
          
          if (selectedTask === 'entity_extraction') {
            // Simulate entity extraction with some variations
            const allEntities = ["heavy rain", "flooding", "city", "weather", "damage", "smoking", "risk", "lung cancer", "health"];
            mockPredictions = sentence.gold_entities.filter(() => Math.random() > 0.1)
              .concat(allEntities.filter(() => Math.random() > 0.8).slice(0, 2));
            goldData = sentence.gold_entities;
          } else {
            // Simulate relationship extraction
            mockPredictions = sentence.gold_relationships.map(rel => ({
              ...rel,
              confidence: Math.random()
            })).filter(() => Math.random() > 0.2);
            goldData = sentence.gold_relationships;
          }
          
          sentenceResults.push({
            sentenceId: sentence.id,
            text: sentence.text,
            predictions: mockPredictions,
            goldData: goldData
          });
        }
        
        // Calculate metrics based on all sentences
        const metrics = calculateMetrics(sentenceResults, selectedTask);
        
        const mockResult = {
          runId,
          promptId,
          promptName: prompt.name,
          promptTemplate: prompt.template,
          model,
          dataset: selectedDataset,
          task: selectedTask,
          timestamp: new Date().toISOString(),
          metrics,
          sentenceResults
        };
        results.push(mockResult);
      }
    }
    
    setCurrentRun({ runId, results });
    setRunHistory(prev => [...prev, ...results]);
    setIsRunning(false);
    setActiveTab('results');
  };

  // Calculate metrics helper
  const calculateMetrics = (sentenceResults, task) => {
    let truePositives = 0;
    let falsePositives = 0;
    let falseNegatives = 0;
    
    sentenceResults.forEach(result => {
      const predictions = result.predictions;
      const goldData = result.goldData;
      
      if (task === 'entity_extraction') {
        predictions.forEach(pred => {
          if (goldData.includes(pred)) {
            truePositives++;
          } else {
            falsePositives++;
          }
        });
        goldData.forEach(gold => {
          if (!predictions.includes(gold)) {
            falseNegatives++;
          }
        });
      } else {
        // Simplified relationship matching
        predictions.forEach(pred => {
          if (goldData.some(gold => gold.cause === pred.cause && gold.effect === pred.effect)) {
            truePositives++;
          } else {
            falsePositives++;
          }
        });
        goldData.forEach(gold => {
          if (!predictions.some(pred => pred.cause === gold.cause && pred.effect === gold.effect)) {
            falseNegatives++;
          }
        });
      }
    });
    
    const precision = truePositives / (truePositives + falsePositives) || 0;
    const recall = truePositives / (truePositives + falseNegatives) || 0;
    const f1 = 2 * (precision * recall) / (precision + recall) || 0;
    
    return { precision, recall, f1, truePositives, falsePositives, falseNegatives };
  };

  // Delete custom prompt
  const handleDeletePrompt = (promptId) => {
    setPrompts(prev => ({
      ...prev,
      [selectedTask]: prev[selectedTask].filter(p => p.id !== promptId)
    }));
    setSelectedPrompts(prev => prev.filter(id => id !== promptId));
  };

  // Export results to JSON
  const exportResults = () => {
    const dataStr = JSON.stringify(currentRun, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `results_${currentRun.runId}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  // Export database to CSV
  const exportDatabaseToCSV = () => {
    const headers = ['Timestamp', 'Model', 'Dataset', 'Task', 'Prompt', 'Precision', 'Recall', 'F1'];
    const csvData = runHistory.map(r => [
      new Date(r.timestamp).toLocaleString(),
      r.model,
      r.dataset,
      r.task,
      r.promptName || r.promptId,
      r.metrics.precision.toFixed(3),
      r.metrics.recall.toFixed(3),
      r.metrics.f1.toFixed(3)
    ]);
    
    const csvContent = [headers, ...csvData]
      .map(row => row.join(','))
      .join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `evaluation_database_${Date.now()}.csv`;
    a.click();
  };

  // Handle file upload
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target.result);
          const datasetName = file.name.replace(/\.(json|jsonl)$/, '');
          setUploadedData(prev => ({
            ...prev,
            [datasetName]: data
          }));
          setSelectedDataset(datasetName);
          alert(`Dataset "${datasetName}" uploaded successfully!`);
        } catch (error) {
          alert('Error parsing file. Please ensure it\'s valid JSON/JSONL format.');
        }
      };
      reader.readAsText(file);
    }
  };

  // Tab components
  const SetupTab = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-semibold mb-4">Task Selection</h3>
        <div className="space-y-2">
          <label className="flex items-center space-x-3">
            <input
              type="radio"
              checked={selectedTask === 'entity_extraction'}
              onChange={() => setSelectedTask('entity_extraction')}
              className="text-blue-600"
            />
            <span>Causal Entity Extraction</span>
          </label>
          <label className="flex items-center space-x-3">
            <input
              type="radio"
              checked={selectedTask === 'relationship_extraction'}
              onChange={() => setSelectedTask('relationship_extraction')}
              className="text-blue-600"
            />
            <span>Causal Relationship Extraction</span>
          </label>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-semibold mb-4">Dataset Selection</h3>
        <select 
          className="w-full p-2 border rounded"
          value={selectedDataset}
          onChange={(e) => setSelectedDataset(e.target.value)}
        >
          {Object.keys(uploadedData).map(key => (
            <option key={key} value={key}>{key}</option>
          ))}
        </select>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Prompt Selection</h3>
          <button
            onClick={() => setShowAddPrompt(true)}
            className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm"
          >
            Add Custom Prompt
          </button>
        </div>
        <div className="space-y-2">
          {prompts[selectedTask].map(prompt => (
            <label key={prompt.id} className="flex items-start space-x-3">
              <input
                type="checkbox"
                checked={selectedPrompts.includes(prompt.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedPrompts(prev => [...prev, prompt.id]);
                  } else {
                    setSelectedPrompts(prev => prev.filter(id => id !== prompt.id));
                  }
                }}
                className="mt-1 text-blue-600"
              />
              <div className="flex-1">
                <div className="font-medium">
                  {prompt.name} 
                  {prompt.isCustom && (
                    <>
                      <span className="ml-2 text-xs bg-purple-100 text-purple-800 px-2 py-0.5 rounded">Custom</span>
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          handleDeletePrompt(prompt.id);
                        }}
                        className="ml-2 text-red-500 hover:text-red-700"
                      >
                        <Trash2 className="w-4 h-4 inline" />
                      </button>
                    </>
                  )}
                </div>
                <div className="text-sm text-gray-600 font-mono">{prompt.template}</div>
              </div>
            </label>
          ))}
        </div>
      </div>

      {showAddPrompt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl">
            <h3 className="text-lg font-semibold mb-4">Add Custom Prompt</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Prompt Name</label>
                <input
                  type="text"
                  value={newPrompt.name}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full p-2 border rounded"
                  placeholder="e.g., Advanced Entity Extraction"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Prompt Template</label>
                <textarea
                  value={newPrompt.template}
                  onChange={(e) => setNewPrompt(prev => ({ ...prev, template: e.target.value }))}
                  className="w-full p-2 border rounded h-32"
                  placeholder="Use {text} as placeholder for the input text"
                />
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => {
                    setShowAddPrompt(false);
                    setNewPrompt({ name: '', template: '' });
                  }}
                  className="px-4 py-2 border rounded hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleAddPrompt}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Add Prompt
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-semibold mb-4">Model Selection</h3>
        <div className="grid grid-cols-2 gap-2">
          {mockModels.map(model => (
            <label key={model} className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={selectedModels.includes(model)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedModels(prev => [...prev, model]);
                  } else {
                    setSelectedModels(prev => prev.filter(m => m !== model));
                  }
                }}
                className="text-blue-600"
              />
              <span>{model}</span>
            </label>
          ))}
        </div>
      </div>

      <button
        onClick={runEvaluation}
        disabled={selectedPrompts.length === 0 || selectedModels.length === 0}
        className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
      >
        <Play className="w-5 h-5" />
        <span>Run Evaluation</span>
      </button>
    </div>
  );

  const ProgressTab = () => (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex flex-col items-center justify-center space-y-4 py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <p className="text-lg font-medium">Running evaluation...</p>
        <p className="text-sm text-gray-600">
          Testing {selectedPrompts.length} prompts on {selectedModels.length} models
        </p>
      </div>
    </div>
  );

  const ResultsTab = () => {
    if (!currentRun) return <div className="text-center py-12">No results to display</div>;

    const chartData = currentRun.results.map(r => ({
      name: `${r.promptName.split(' ')[0]}-${r.model.split('-').pop()}`,
      precision: r.metrics.precision,
      recall: r.metrics.recall,
      f1: r.metrics.f1
    }));

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Performance Metrics</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis domain={[0, 1]} />
              <Tooltip />
              <Legend />
              <Bar dataKey="precision" fill="#3B82F6" />
              <Bar dataKey="recall" fill="#10B981" />
              <Bar dataKey="f1" fill="#F59E0B" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Detailed Results</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prompt</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precision</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recall</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">F1</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {currentRun.results.map((result, idx) => (
                  <tr key={idx}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.model}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.promptName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.metrics.precision.toFixed(3)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.metrics.recall.toFixed(3)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.metrics.f1.toFixed(3)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <button
                        onClick={() => setSelectedResult(result)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        View Details
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {selectedResult && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-lg font-semibold">Detailed Results</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    Model: {selectedResult.model} | Prompt: {selectedResult.promptName}
                  </p>
                </div>
                <button
                  onClick={() => setSelectedResult(null)}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              <div className="mb-4 p-4 bg-gray-50 rounded">
                <h4 className="font-medium mb-2">Prompt Template:</h4>
                <p className="text-sm font-mono">{selectedResult.promptTemplate}</p>
              </div>

              <div className="mb-4 p-4 bg-blue-50 rounded">
                <h4 className="font-medium mb-2">Overall Metrics:</h4>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Precision:</span>
                    <span className="ml-2 font-medium">{selectedResult.metrics.precision.toFixed(3)}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">Recall:</span>
                    <span className="ml-2 font-medium">{selectedResult.metrics.recall.toFixed(3)}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">F1 Score:</span>
                    <span className="ml-2 font-medium">{selectedResult.metrics.f1.toFixed(3)}</span>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h4 className="font-medium">Sentence-by-Sentence Results:</h4>
                {selectedResult.sentenceResults.map((sentenceResult, idx) => (
                  <div key={idx} className="border rounded-lg p-4">
                    <div className="mb-3">
                      <span className="text-sm font-medium text-gray-500">Sentence {idx + 1}:</span>
                      <p className="mt-1">{sentenceResult.text}</p>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="text-sm font-medium text-green-700 mb-2">Gold Standard:</h5>
                        <div className="text-sm space-y-1">
                          {selectedResult.task === 'entity_extraction' ? (
                            <div className="flex flex-wrap gap-1">
                              {sentenceResult.goldData.map((entity, i) => (
                                <span key={i} className="px-2 py-1 bg-green-100 text-green-800 rounded">
                                  {entity}
                                </span>
                              ))}
                            </div>
                          ) : (
                            sentenceResult.goldData.map((rel, i) => (
                              <div key={i} className="p-2 bg-green-50 rounded">
                                <span className="font-medium">Cause:</span> {rel.cause} → 
                                <span className="font-medium ml-1">Effect:</span> {rel.effect}
                                {rel.location && <span className="ml-1">(Location: {rel.location})</span>}
                              </div>
                            ))
                          )}
                        </div>
                      </div>
                      
                      <div>
                        <h5 className="text-sm font-medium text-blue-700 mb-2">Model Predictions:</h5>
                        <div className="text-sm space-y-1">
                          {selectedResult.task === 'entity_extraction' ? (
                            <div className="flex flex-wrap gap-1">
                              {sentenceResult.predictions.map((entity, i) => (
                                <span 
                                  key={i} 
                                  className={`px-2 py-1 rounded ${
                                    sentenceResult.goldData.includes(entity) 
                                      ? 'bg-blue-100 text-blue-800' 
                                      : 'bg-red-100 text-red-800'
                                  }`}
                                >
                                  {entity}
                                </span>
                              ))}
                            </div>
                          ) : (
                            sentenceResult.predictions.map((rel, i) => (
                              <div key={i} className="p-2 bg-blue-50 rounded">
                                <span className="font-medium">Cause:</span> {rel.cause} → 
                                <span className="font-medium ml-1">Effect:</span> {rel.effect}
                                {rel.confidence && <span className="ml-1 text-xs text-gray-500">(conf: {rel.confidence.toFixed(2)})</span>}
                              </div>
                            ))
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const DatabaseTab = () => {
    const [sortBy, setSortBy] = useState('f1');
    const [filterBy, setFilterBy] = useState('all');
    
    const sortedHistory = useMemo(() => {
      let filtered = runHistory;
      if (filterBy !== 'all') {
        filtered = runHistory.filter(r => r.dataset === filterBy);
      }
      
      return [...filtered].sort((a, b) => {
        if (sortBy === 'f1') return b.metrics.f1 - a.metrics.f1;
        if (sortBy === 'timestamp') return new Date(b.timestamp) - new Date(a.timestamp);
        return 0;
      });
    }, [runHistory, sortBy, filterBy]);

    const aggregatedData = useMemo(() => {
      const grouped = {};
      runHistory.forEach(r => {
        const key = `${r.model}-${r.dataset}`;
        if (!grouped[key]) {
          grouped[key] = { model: r.model, dataset: r.dataset, runs: 0, avgF1: 0, totalF1: 0 };
        }
        grouped[key].runs += 1;
        grouped[key].totalF1 += r.metrics.f1;
        grouped[key].avgF1 = grouped[key].totalF1 / grouped[key].runs;
      });
      return Object.values(grouped);
    }, [runHistory]);

    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold">Run History</h3>
            <div className="flex space-x-4">
              <select 
                className="border rounded px-3 py-1"
                value={filterBy}
                onChange={(e) => setFilterBy(e.target.value)}
              >
                <option value="all">All Datasets</option>
                {Object.keys(uploadedData).map(key => (
                  <option key={key} value={key}>{key}</option>
                ))}
              </select>
              <select 
                className="border rounded px-3 py-1"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="f1">Sort by F1</option>
                <option value="timestamp">Sort by Date</option>
              </select>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dataset</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">F1 Score</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {sortedHistory.map((result, idx) => (
                  <tr key={idx}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(result.timestamp).toLocaleString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.model}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.dataset}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.task.replace('_', ' ')}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{result.metrics.f1.toFixed(3)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">Aggregated Performance</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dataset</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Runs</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Avg F1</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {aggregatedData.map((data, idx) => (
                  <tr key={idx}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{data.model}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{data.dataset}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{data.runs}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{data.avgF1.toFixed(3)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <h1 className="text-2xl font-bold text-gray-900">Causal Extraction Evaluation Framework</h1>
            <div className="flex space-x-2">
              <label className="flex items-center space-x-2 px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 cursor-pointer">
                <Upload className="w-4 h-4" />
                <span>Upload Data</span>
                <input
                  type="file"
                  accept=".json,.jsonl"
                  onChange={handleFileUpload}
                  className="hidden"
                />
              </label>
              {currentRun && (
                <button 
                  onClick={exportResults}
                  className="flex items-center space-x-2 px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                >
                  <Download className="w-4 h-4" />
                  <span>Export Results</span>
                </button>
              )}
              {runHistory.length > 0 && (
                <button 
                  onClick={exportDatabaseToCSV}
                  className="flex items-center space-x-2 px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                >
                  <Database className="w-4 h-4" />
                  <span>Export Database</span>
                </button>
              )}
            </div>
          </div>
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              {['setup', 'progress', 'results', 'database'].map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`${
                    activeTab === tab
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm capitalize flex items-center space-x-2`}
                >
                  {tab === 'setup' && <FileJson className="w-4 h-4" />}
                  {tab === 'progress' && <Play className="w-4 h-4" />}
                  {tab === 'results' && <TrendingUp className="w-4 h-4" />}
                  {tab === 'database' && <Database className="w-4 h-4" />}
                  <span>{tab}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'setup' && <SetupTab />}
        {activeTab === 'progress' && isRunning && <ProgressTab />}
        {activeTab === 'results' && <ResultsTab />}
        {activeTab === 'database' && <DatabaseTab />}
      </div>
    </div>
  );
}